{"ast":null,"code":"const getSHA256Hash = async input => {\n  const textAsBuffer = new TextEncoder().encode(input);\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", textAsBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hash = hashArray.map(item => item.toString(16).padStart(2, \"0\")).join(\"\");\n  return hash;\n};\nexport { getSHA256Hash };","map":{"version":3,"names":["getSHA256Hash","input","textAsBuffer","TextEncoder","encode","hashBuffer","window","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hash","map","item","toString","padStart","join"],"sources":["/data/data/com.termux/files/home/web/nexil/node_modules/boring-webcrypto-sha256/src/index.ts"],"sourcesContent":["export const getSHA256Hash = async (input: string) => {\n  const textAsBuffer = new TextEncoder().encode(input);\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", textAsBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hash = hashArray\n    .map((item) => item.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n  return hash;\n};\n"],"mappings":"AAAO,MAAMA,aAAA,GAAgB,MAAOC,KAAA,IAAkB;EACpD,MAAMC,YAAA,GAAe,IAAIC,WAAA,CAAY,EAAEC,MAAA,CAAOH,KAAK;EACnD,MAAMI,UAAA,GAAa,MAAMC,MAAA,CAAOC,MAAA,CAAOC,MAAA,CAAOC,MAAA,CAAO,WAAWP,YAAY;EAC5E,MAAMQ,SAAA,GAAYC,KAAA,CAAMC,IAAA,CAAK,IAAIC,UAAA,CAAWR,UAAU,CAAC;EACvD,MAAMS,IAAA,GAAOJ,SAAA,CACVK,GAAA,CAAKC,IAAA,IAASA,IAAA,CAAKC,QAAA,CAAS,EAAE,EAAEC,QAAA,CAAS,GAAG,GAAG,CAAC,EAChDC,IAAA,CAAK,EAAE;EACV,OAAOL,IAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}